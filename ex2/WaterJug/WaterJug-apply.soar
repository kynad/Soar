##
#  @file WaterJug-apply.soar
#  @author Dany Rovinsky
#
#  @brief This file contains all apply productions (not including initialize).
##

## apply-fill rule
#  Replaces the value of jug's contents with the value of volume
sp {water-jug*apply*fill
   (state <state> ^name water-jug ^operator <oper> ^jug <jug>)
   (<oper> ^name fill ^fill-jug <jug>)
   (<jug> ^contents <jug_content> ^volume <jug_volume>)
-->
   (<jug> ^contents <jug_volume>)
   (<jug> ^contents <jug_content> -)
}

## apply-empty rule
#  Replaces the value of jug's contents with 0
sp {water-jug*apply*empty
   (state <state> ^name water-jug ^operator <oper> ^jug <jug>)
   (<oper> ^name empty ^empty-jug <jug>)
   (<jug> ^volume <jug_volume> ^contents <jug_contents>)
-->
   (<jug> ^contents 0 ^contents <jug_contents> -)
}

## apply-pour-will-empty-empty-jug rule
#
#  This simple rule is splitted into two, beacuse there are two possible paths here.
#  This probably could be avoided by adding elaborators that would do max and min on the content.
#
#  @condition: jug_1_content leq jug_2_empty (i.e. there is more free volume in jug_2 than the content in jug_1)
#  @action: replace the contents of the first jug with 0
#           replace the contents of the second jug with the sum of the contents of the two jugs.
sp {water-jug*apply*pour*will-empty-empty-jug
   (state <state> ^name water-jug ^operator <oper>)
   (<oper> ^name pour ^empty-jug <jug_1> ^fill-jug <jug_2>)
   (<jug_2> ^volume <jug_2_volume> ^contents <jug_2_content> ^empty <jug_2_empty>)
   (<jug_1> ^volume <jug_1_volume> ^contents { <jug_1_content> <= <jug_2_empty> })
-->
   (<jug_1> ^contents 0 ^contents <jug_1_content> -)
   (<jug_2> ^contents (+ <jug_2_content> <jug_1_content>))
   (<jug_2> ^contents <jug_2_content> - )
}

## apply-pour-will-not-empty-jug rule
#
#  this simple rule is splitted into two, beacuse there are two possible paths here.
#  this probably could be avoided by adding elaborators that would do max and min on the content.
#
#  @condition: jug_1_content is greater than jug_2_empty (i.e. there is less free volume in jug_2 than the content in jug_1)
#  @action: replace the contents of the first jug with the difference between that content and the free volume of the second jug
#           replace the contents of the second jug with its volume
sp {water-jug*apply*pour*will-not-empty-jug
   (state <state> ^name water-jug ^operator <oper>)
   (<oper> ^name pour ^empty-jug <jug_1> ^fill-jug <jug_2>)
   (<jug_2> ^volume <jug_2_volume> ^contents <jug_2_content> ^empty <jug_2_empty>)
   (<jug_1> ^volume <jug_1_volume> ^contents { <jug_1_content> > <jug_2_empty> })
-->   
   (<jug_1> ^contents (- <jug_1_content> <jug_2_empty>))
   (<jug_1> ^contents <jug_1_content> -)
   (<jug_2> ^contents <jug_2_volume> ^contents <jug_2_content> - )
}


## apply-operator-record-last-operator-pour
#  Maintains the last operator in memory to avoid repeating the same operation twice.
sp {water-jug*apply*operator*record*last-operator*pour
   (state <state> ^name water-jug ^operator <oper>)
   (<oper> ^name pour ^fill-jug <fill_jug> ^empty-jug <empty_jug>)
-->
   (<state> ^last-operator <last-op>)
   (<last-op> ^name pour ^fill-jug <fill_jug> ^empty-jug <empty_jug>)
}


## apply-operator-remove-last-operator-pour
#  Removes last-operator if current operator is pour and last one was either not pour, or pour but for a different jug.
sp {water-jug*apply*operator*remove*last-operator*pour
   (state <state> ^name water-jug ^operator <oper> ^last-operator <last-op>)
   (<oper> ^name pour ^fill-jug <fill_jug> ^empty-jug <empty_jug>)
  -(<last-op> ^name pour ^fill-jug <fill_jug> ^empty-jug <empty_jug>)
-->
   (<state> ^last-operator <last-op> -)
}


## apply-operator-record-last-operator-fill
#  Maintains the last operator in memory to avoid repeating the same operation twice.
sp {water-jug*apply*operator*record*last-operator*fill
   (state <state> ^name water-jug ^operator <oper>)
   (<oper> ^name fill ^fill-jug <fill_jug>)
-->
   (<state> ^last-operator <last-op>)
   (<last-op> ^name fill ^fill-jug <fill_jug>)
}


## apply-operator-remove-last-operator-fill
#  Remove last-operator if current operator is fill and last one was either not fill, or fill but for a different jug.
sp {water-jug*apply*operator*remove*last-operator*fill
   (state <state> ^name water-jug ^operator <oper> ^last-operator <last-op>)
   (<oper> ^name fill ^fill-jug <fill_jug>)
  -(<last-op> ^name fill ^fill-jug <fill_jug>)
-->
   (<state> ^last-operator <last-op> -)
}

## apply-operator-record-last-operator-empty
#  Maintains the last operator in memory to avoid repeating the same operation twice.
sp {water-jug*apply*operator*record*last-operator*empty
   (state <state> ^name water-jug ^operator <oper>)
   (<oper> ^name empty ^empty-jug <empty_jug>)
-->
   (<state> ^last-operator <last-op>)
   (<last-op> ^name empty ^empty-jug <empty_jug>)
}


## apply-operator-remove-last-operator-pour
#  Remove last-operator if current operator is pour and last one was either not pour, or pour but for a different jug.
sp {water-jug*apply*operator*remove*last-operator*empty
   (state <state> ^name water-jug ^operator <oper> ^last-operator <last-op>)
   (<oper> ^name empty ^empty-jug <empty_jug>)
  -(<last-op> ^name empty ^empty-jug <empty_jug>)
-->
   (<state> ^last-operator <last-op> -)
}



